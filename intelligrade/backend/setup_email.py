#!/usr/bin/env python3
"""
IntelliGrade Email Setup Script
This script helps you configure email settings for the forgot password functionality.
"""

import os
import getpass
from pathlib import Path

def create_env_file():
    """Create or update .env file with email configuration"""
    backend_dir = Path(__file__).parent
    env_file = backend_dir / ".env"
    
    print("🔐 IntelliGrade Email Setup")
    print("=" * 40)
    print("This will configure email settings for password reset functionality.")
    print("")
    
    # Get email provider choice
    print("Choose your email provider:")
    print("1. Gmail (Recommended)")
    print("2. Outlook/Hotmail")
    print("3. Yahoo")
    print("4. Other/Custom")
    
    choice = input("Enter choice (1-4): ").strip()
    
    # Set SMTP settings based on choice
    if choice == "1":
        smtp_server = "smtp.gmail.com"
        smtp_port = "587"
        print("\n📧 Gmail Configuration")
        print("You'll need to generate an App Password:")
        print("1. Go to https://myaccount.google.com/")
        print("2. Security → 2-Step Verification → App passwords")
        print("3. Generate password for 'IntelliGrade'")
        print("")
    elif choice == "2":
        smtp_server = "smtp-mail.outlook.com"
        smtp_port = "587"
        print("\n📧 Outlook Configuration")
    elif choice == "3":
        smtp_server = "smtp.mail.yahoo.com"
        smtp_port = "587"
        print("\n📧 Yahoo Configuration")
    else:
        smtp_server = input("SMTP Server: ").strip()
        smtp_port = input("SMTP Port (usually 587): ").strip() or "587"
        print(f"\n📧 Custom SMTP Configuration")
    
    # Get credentials
    email = input("Email address: ").strip()
    password = getpass.getpass("Password (App Password for Gmail): ")
    from_name = input("Sender name (default: IntelliGrade Support): ").strip() or "IntelliGrade Support"
    frontend_url = input("Frontend URL (default: http://localhost:5174): ").strip() or "http://localhost:5174"
    
    # Create .env content
    env_content = f"""# IntelliGrade Email Configuration
# Generated by setup_email.py

# Email settings
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_USER={email}
SMTP_PASSWORD={password}
FROM_NAME={from_name}
FRONTEND_URL={frontend_url}

# Database and other settings (add your existing settings here)
# DATABASE_URL=your_database_url
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print(f"\n✅ Email configuration saved to {env_file}")
        print("\n🔄 Please restart your server for changes to take effect.")
        print("\n🧪 Test your configuration by:")
        print("1. Restart the backend server")
        print("2. Go to http://localhost:8000/auth/email-status")
        print("3. Try the forgot password feature")
        
    except Exception as e:
        print(f"\n❌ Error saving configuration: {e}")
        print("Please create the .env file manually with the following content:")
        print("\n" + "="*50)
        print(env_content)
        print("="*50)

def test_existing_config():
    """Test existing email configuration"""
    smtp_user = os.getenv("SMTP_USER")
    smtp_password = os.getenv("SMTP_PASSWORD")
    
    if not smtp_user or not smtp_password:
        print("❌ Email not configured. Run option 1 to set up email.")
        return
    
    print(f"📧 Current email: {smtp_user}")
    print("🧪 Testing configuration...")
    
    try:
        # Import here to avoid issues if backend isn't set up
        import sys
        sys.path.append('..')
        from services.email_service import test_email_configuration
        
        if test_email_configuration():
            print("✅ Email configuration is working!")
        else:
            print("❌ Email configuration failed. Check your credentials.")
    except Exception as e:
        print(f"❌ Error testing configuration: {e}")

def main():
    """Main menu"""
    while True:
        print("\n🔐 IntelliGrade Email Setup")
        print("=" * 30)
        print("1. Set up email configuration")
        print("2. Test existing configuration")
        print("3. Show current status")
        print("4. Exit")
        
        choice = input("\nEnter choice (1-4): ").strip()
        
        if choice == "1":
            create_env_file()
        elif choice == "2":
            test_existing_config()
        elif choice == "3":
            smtp_user = os.getenv("SMTP_USER")
            if smtp_user:
                print(f"✅ Email configured: {smtp_user}")
            else:
                print("❌ Email not configured")
        elif choice == "4":
            print("👋 Goodbye!")
            break
        else:
            print("❌ Invalid choice. Please try again.")

if __name__ == "__main__":
    # Load existing .env if it exists
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("💡 Tip: Install python-dotenv for better .env file support")
        print("   pip install python-dotenv")
    
    main()